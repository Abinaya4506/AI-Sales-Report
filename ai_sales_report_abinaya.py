# -*- coding: utf-8 -*-
"""AI-Sales-Report-Abinaya

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N3oYJmkYfupBJeiVham7DNZmiOWL8GKD

# 📊 AI-Powered Sales Report
**Created using Python — No Power BI, No Excel**  
**Author:** [Your Name]  
**Date:** [Today]

---

## 📄 Executive Summary

This Python-powered report analyzes 2,800+ sales transactions across multiple product lines and regions.  
It includes visual analysis, AI-style insights, and business recommendations to help make strategic decisions.
"""

# 🔁 Final One-Run Report Cell
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, Markdown

# Setup
sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (10, 5)

# Load + Clean
df = pd.read_csv("/sales_data_sample.csv", encoding="latin1")
df["ORDERDATE"] = pd.to_datetime(df["ORDERDATE"], errors="coerce")
df["SALES"] = pd.to_numeric(df["SALES"], errors="coerce")
df.dropna(subset=["ORDERDATE", "SALES"], inplace=True)
df["YEAR_MONTH"] = df["ORDERDATE"].dt.to_period("M").astype(str)

# ✨ Dataset Preview
display(Markdown("## 📂 Dataset Preview"))
display(df.head())

# 💼 Top Product Lines
top_products = df.groupby("PRODUCTLINE")["SALES"].sum().sort_values(ascending=False)
fig1, ax1 = plt.subplots()
sns.barplot(x=top_products.values, y=top_products.index, palette="viridis", ax=ax1)
ax1.set_title("💼 Top Product Lines by Total Sales")
ax1.set_xlabel("Total Sales")
ax1.set_ylabel("Product Line")
display(Markdown("## 💼 Top Product Lines by Sales"))
display(fig1)

# 📆 Monthly Sales Trend
monthly_sales = df.groupby("YEAR_MONTH")["SALES"].sum().reset_index()
fig2, ax2 = plt.subplots()
sns.lineplot(data=monthly_sales, x="YEAR_MONTH", y="SALES", marker="o", color="orange", ax=ax2)
ax2.set_title("📆 Monthly Sales Trend")
ax2.set_xlabel("Month")
ax2.set_ylabel("Total Sales")
ax2.tick_params(axis="x", rotation=45)
display(Markdown("## 📆 Monthly Sales Trend"))
display(fig2)

# 🌍 Country Sales Pie
country_sales = df.groupby("COUNTRY")["SALES"].sum().sort_values(ascending=False)
top_countries = country_sales.head(5)
others = pd.Series({"Others": country_sales[5:].sum()})
final_country_sales = pd.concat([top_countries, others])
fig3, ax3 = plt.subplots()
ax3.pie(final_country_sales, labels=final_country_sales.index, autopct="%1.1f%%", startangle=140)
ax3.set_title("🌍 Sales Distribution by Country")
display(Markdown("## 🌍 Country-wise Sales Distribution"))
display(fig3)

# 🧍‍♂️ Deal Size Analysis
deal_sales = df.groupby("DEALSIZE")["SALES"].sum().sort_values(ascending=False)
fig4, ax4 = plt.subplots()
sns.barplot(x=deal_sales.index, y=deal_sales.values, palette="coolwarm", ax=ax4)
ax4.set_title("🧍‍♂️ Sales by Customer Segment (DEALSIZE)")
ax4.set_xlabel("Deal Size")
ax4.set_ylabel("Total Sales")
display(Markdown("## 🧍‍♂️ Sales by Customer Segment"))
display(fig4)

# 🧠 AI Insight Summary
peak = monthly_sales.loc[monthly_sales["SALES"].idxmax(), "YEAR_MONTH"]
low = monthly_sales.loc[monthly_sales["SALES"].idxmin(), "YEAR_MONTH"]
avg = monthly_sales["SALES"].mean()

display(Markdown("## 🧠 AI Insight Summary"))
print(f"- 📈 Peak Month: {peak}")
print(f"- 📉 Lowest Month: {low}")
print(f"- 📊 Avg Monthly Sales: ${avg:,.2f}")
print("- 💡 Business Tip: Focus on large deal customers & peak months.")

# ✅ Conclusion
display(Markdown("## ✅ Conclusion"))
display(Markdown("""
This end-to-end analysis shows that Python can fully replace traditional tools like Power BI for building smart, business-ready dashboards and insights.
All data cleaning, analysis, and visualization — including AI-driven summaries — were done using Python code in Google Colab.
"""))